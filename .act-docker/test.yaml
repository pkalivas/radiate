name: publish

on:
  push:
    tags: [ 'rc' ]
  workflow_dispatch:
    inputs:
      os:
        description: "Limit to one OS (ubuntu-latest|macos-13|macos-15|windows-latest)"
        required: false
        default: ""
      arch:
        description: "Limit to one arch (x86_64|aarch64|arm64|x64)"
        required: false
        default: ""
      py:
        description: "Limit to one Python (e.g. 3.12 or 3.13t)"
        required: false
        default: ""
      mode:
        description: "Limit to one mode (gil|nogil)"
        required: false
        default: ""

permissions:
  contents: read
  id-token: write

env:
  ACT: 'false'

jobs:
  linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # glibc modern
          - { target: x86_64,  manylinux: manylinux_2_28 }
          - { target: aarch64, manylinux: manylinux_2_28 }
          # older/alt arches need manylinux2014
          - { target: i686,    manylinux: manylinux2014 }
          - { target: armv7,   manylinux: manylinux2014 }
          - { target: s390x,   manylinux: manylinux2014 }
          - { target: ppc64le, manylinux: manylinux2014 }
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # ---------- ABI3 (GIL) wheels ----------
      - name: Build wheels (abi3 • ${{ matrix.target }} • ${{ matrix.manylinux }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: >
            build
            --release
            --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      # ---------- Free-threaded cp313t wheels ----------
      - name: Build wheels (cp313t • ${{ matrix.target }} • ${{ matrix.manylinux }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: >
            build
            --release
            --out dist
            -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist/*

  musllinux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64, aarch64, armv7 ]
    steps:
      - uses: actions/checkout@v4

      - name: Build wheels (abi3 • musllinux_1_2 • ${{ matrix.target }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: >
            build
            --release
            --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Build wheels (cp313t • musllinux_1_2 • ${{ matrix.target }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: >
            build
            --release
            --out dist
            -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}
          path: dist/*

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64, py_arch: x64 }
          - { target: i686,   py_arch: x86 }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: ${{ matrix.py_arch }}
      - name: Build wheels (ABI3 • Windows • ${{ matrix.target }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          args: >
            build
            --release
            --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist/*

  macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - name: Build wheels (ABI3 • macOS universal2)
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          args: >
            build
            --release
            --out dist
            --universal2
            --interpreter python3
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-universal2
          path: dist/*

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          command: sdist
          args: --out dist
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist/*

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ linux, musllinux, windows, macos, sdist ]
    environment:
      name: publish_pypi
    # if: ${{ (startsWith(github.ref, 'refs/tags/')) }
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist-collect
          merge-multiple: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist-collect/**/*'

      - name: Gather dists
        run: |
          mkdir -p dist
          find dist-collect -type f -name "*.whl" -exec cp {} dist/ \;
          find dist-collect -type f -name "*.tar.gz" -exec cp {} dist/ \;
          ls -l dist

      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true

# name: test

# on:
#   workflow_dispatch:

# permissions:
#   contents: read
#   id-token: write

# env:
#   PYTHON_VERSION: '3.9'
#   CARGO_INCREMENTAL: 0
#   CARGO_NET_RETRY: 10
#   RUSTUP_MAX_RETRIES: 10

# jobs:
#   base-package:
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ inputs.sha }}

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}

#       - name: Install uv
#         run: pip install uv

#       - name: Build sdist and wheel
#         run: |
#           uv build py-radiate --out-dir dist
      
#       - name: Upload base package
#         uses: actions/upload-artifact@v4
#         with:
#           path: dist

#   create-sdist:
#     needs: [base-package]
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4
#         with:
#           ref: ${{ inputs.sha }}

#       - name: Download base package
#         uses: actions/download-artifact@v4
#         with:
#           path: dist
#           merge-multiple: true

#       # Avoid potential out-of-memory errors
#       - name: Set swap space for Linux
#         uses: pierotofy/set-swap-space@master
#         with:
#           swap-size-gb: 10

#       - name: Install yq
#         run: |
#           pip install --force-reinstall --no-dependencies dist/radiate-*.whl
#           rm -rf dist/*
#           pip install yq

#       - name: Create source distribution
#         uses: PyO3/maturin-action@v1
#         with:
#           command: sdist
#           args: >
#             --manifest-path py-radiate/Cargo.toml
#             --out dist
#           maturin-version: 1.8.3

#       - name: Test sdist
#         run: |
#           pip install --force-reinstall --verbose dist/*.tar.gz
#           python -c 'import radiate; radiate.__version__'

#       - name: Upload sdist
#         uses: actions/upload-artifact@v4
#         with:
#           name: sdist-${{ matrix.package }}
#           path: dist/*.tar.gz

      #   # ABI3 (Linux)
      # - name: Build wheel (ABI3)
      #   if: runner.os == 'Linux'
      #   uses: PyO3/maturin-action@v1
      #   with:
      #     maturin-version: '1.9.4'
      #     command: build
      #     args: >
      #       --release
      #       -m py-radiate/Cargo.toml
      #       -o dist
      #     target: ${{ matrix.target }}
      #     manylinux: auto

      # # cp313t (Linux)
      # - name: Build wheel (cp313t, Linux only)
      #   if: runner.os == 'Linux'
      #   uses: PyO3/maturin-action@v1
      #   with:
      #     maturin-version: '1.9.4'
      #     command: build
      #     args: >
      #       --release
      #       -m py-radiate/Cargo.toml
      #       -o dist
      #       --no-default-features --features nogil
      #       -i python3.13t
      #     target: ${{ matrix.target }}
      #     manylinux: auto

      # -------------------------
      # ABI3 wheel (all platforms)
      # # -------------------------
      # - name: Build wheel (ABI3)
      #   uses: PyO3/maturin-action@v1
      #   with:
      #     maturin-version: '1.9.4'
      #     command: build
      #     args: >
      #       --release
      #       -m py-radiate/Cargo.toml
      #       -o dist
      #     target: ${{ matrix.target }}
      #     # On Linux, maturin runs inside manylinux automatically
      #     manylinux: auto

      # # ---------------------------------------------------------
      # # Free-threaded cp313t wheel (Linux only, minimal & reliable)
      # # ---------------------------------------------------------
      # - name: Build wheel (cp313t, Linux only)
      #   if: runner.os == 'Linux'
      #   uses: PyO3/maturin-action@v1
      #   with:
      #     maturin-version: '1.9.4'
      #     command: build
      #     args: >
      #       --release
      #       -m py-radiate/Cargo.toml
      #       -o dist
      #       --no-default-features --features nogil
      #       -i python3.13t
      #     target: ${{ matrix.target }}
      #     manylinux: auto

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: wheels-${{ matrix.os }}-${{ matrix.arch }}
      #     path: dist/*.whl
# name: CI-ACT

# on:
#   workflow_dispatch:

# jobs:
#   linux:
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - { target: x86_64 }
#           - { target: arm64 }
#     steps:
#       - uses: actions/checkout@v4
#       - name: Build sdist
#         run: |
#           echo "pwd is $(pwd)"
#           # cd py-radiate
#           # uvx maturin sdist -o target-sdist
#       - name: Build wheels (abi3)
#         uses: PyO3/maturin-action@v1
#         with:
#           maturin-version: '1.9.4'
#           target: ${{ matrix.target }}
#           manylinux: auto
#           args: >
#             build --release --out dist
#           sccache: false
#       - name: Build wheels (cp313t)
#         uses: PyO3/maturin-action@v1
#         with:
#           maturin-version: '1.9.4'
#           target: ${{ matrix.target }}
#           manylinux: auto
#           args: >
#             build --release --out dist -i python3.13t
#           sccache: false
#       - uses: actions/upload-artifact@v4
#         with:
#           name: wheels-linux-${{ matrix.target }}
          