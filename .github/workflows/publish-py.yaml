name: Publish Python Wheels and Sdist

on:
  push:
    tags: [ 'v*' ]   # publish on version tags, e.g. v0.1.0
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write      # PyPI Trusted Publisher

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Install uv
        run: python -m pip install -U pip uv

      - name: Build sdist
        run: |
          cd py-radiate
          uvx maturin sdist -m pyproject.toml -o target-sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: py-radiate/target-sdist/*.tar.gz

  wheels:
    name: ${{ matrix.os }} • ${{ matrix.arch }} • ${{ matrix.mode }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ---------- Linux ----------
          - { os: ubuntu-latest, arch: x86_64,  mode: gil,   py: '3.12',  manylinux: auto }
          - { os: ubuntu-latest, arch: aarch64, mode: gil,   py: '3.12',  manylinux: '2_24', target: aarch64-unknown-linux-gnu }

          - { os: ubuntu-latest, arch: x86_64,  mode: nogil, py: '3.13t', manylinux: auto }
          - { os: ubuntu-latest, arch: aarch64, mode: nogil, py: '3.13t', manylinux: '2_24', target: aarch64-unknown-linux-gnu }

          # ---------- macOS ----------
          - { os: macos-13, arch: x86_64, mode: gil,   py: '3.12' }
          - { os: macos-15, arch: arm64,  mode: gil,   py: '3.12' }
          - { os: macos-13, arch: x86_64, mode: nogil, py: '3.13t' }
          - { os: macos-15, arch: arm64,  mode: nogil, py: '3.13t' }

          # ---------- Windows (x64) ----------
          - { os: windows-latest, arch: x64, mode: gil,   py: '3.12' }
          - { os: windows-latest, arch: x64, mode: nogil, py: '3.13t' }

          # (Optional) Windows ARM64 – enable when you want it:
          # - { os: windows-11-arm, arch: arm64, mode: gil,   py: '3.12' }
          # - { os: windows-11-arm, arch: arm64, mode: nogil, py: '3.13t' }

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      # Host python for tooling; uv will install/find the matrix interpreter itself
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Install uv
        run: python -m pip install -U pip uv

      - name: Ensure requested interpreter (best effort)
        shell: bash
        run: |
          set -e
          uv python install "${{ matrix.py }}" || true
          uv python list --only-installed

      - name: Select interpreter, flags, and target dir
        id: envsel
        shell: bash
        run: |
          set -euo pipefail

          echo "::group::uv versions"
          uv --version || true
          uv python --version || true
          echo "::endgroup::"

          # 1) Try to ensure the exact interpreter exists (best-effort).
          #    For 3.13t on some runners, this may fail; that's OK—we'll fallback.
          echo "::group::Ensuring interpreter ${{ matrix.py }}"
          if ! uv python install "${{ matrix.py }}"; then
            echo "WARN: uv could not install ${{ matrix.py }} on ${{ runner.os }} (${{ matrix.arch }}). Will try fallbacks." >&2
          fi
          echo "::endgroup::"

          echo "::group::Installed Pythons"
          uv python list --only-installed || true
          echo "::endgroup::"

          # Helper: resolve the latest installed interpreter *by mode*
          pick_latest_by_mode() {
            local want="$1"  # "gil" or "nogil"
            local id
            if [[ "$want" == "nogil" ]]; then
              # pick the newest +freethreaded id
              id="$(uv python list --only-installed | awk 'tolower($1) ~ /\+freethreaded/ {print $1}' | sort -rV | head -n1)"
            else
              # pick the newest *non*-freethreaded id
              id="$(uv python list --only-installed | awk 'tolower($1) !~ /\+freethreaded/ {print $1}' | sort -rV | head -n1)"
            fi
            [[ -n "${id:-}" ]] && uv python find  "$id" || true
          }

          # 2) First, try to find the exact spec from the matrix.
          PY="$(uv python find "${{ matrix.py }}" 2>/dev/null || true)"

          # 3) If that failed, fall back to "latest by mode".
          if [[ -z "${PY}" ]]; then
            if [[ "${{ matrix.mode }}" == "nogil" ]]; then
              PY="$(pick_latest_by_mode nogil)"
            else
              PY="$(pick_latest_by_mode gil)"
            fi
          fi

          # 4) If still empty, skip this matrix axis cleanly.
          if [[ -z "${PY}" ]]; then
            echo "Requested interpreter '${{ matrix.py }}' not available; no suitable fallback found on ${{ runner.os }} (${{ matrix.arch }})." >&2
            echo "skip=1" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Flags & target dir by mode
          if [[ "${{ matrix.mode }}" == "nogil" ]]; then
            FLAGS="--no-default-features --features nogil"
            TARGET_DIR="target-nogil"
          else
            FLAGS="--features gil"
            TARGET_DIR="target-gil"
          fi

          echo "Using interpreter: $PY"
          "$PY" -c 'import sys; print("Python:", sys.version)'
          echo "py=$PY"                >> "$GITHUB_OUTPUT"
          echo "flags=$FLAGS"          >> "$GITHUB_OUTPUT"
          echo "target_dir=$TARGET_DIR">> "$GITHUB_OUTPUT"
          echo "skip=0"                >> "$GITHUB_OUTPUT"

      - name: Cache cargo
        if: steps.envsel.outputs.skip == '0'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Build on Linux (handles manylinux + cross aarch64)
      - name: Build wheel (Linux)
        if: runner.os == 'Linux' && steps.envsel.outputs.skip == '0'
        uses: PyO3/maturin-action@v1
        env:
          PYO3_PYTHON: ${{ steps.envsel.outputs.py }}
          CARGO_TARGET_DIR: ${{ steps.envsel.outputs.target_dir }}
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'off' }}
          args: >
            build
            --release
            -m py-radiate/pyproject.toml
            -o dist
            ${{ steps.envsel.outputs.flags }}

      # Build on macOS/Windows (no manylinux/target flags)
      - name: Build wheel (macOS/Windows)
        if: runner.os != 'Linux' && steps.envsel.outputs.skip == '0'
        uses: PyO3/maturin-action@v1
        env:
          PYO3_PYTHON: ${{ steps.envsel.outputs.py }}
          CARGO_TARGET_DIR: ${{ steps.envsel.outputs.target_dir }}
        with:
          maturin-version: '1.9.4'
          args: >
            build
            --release
            -m py-radiate/pyproject.toml
            -o dist
            ${{ steps.envsel.outputs.flags }}

  publish:
    name: Publish to PyPI
    needs: [ sdist, wheels ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # only on tag
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - run: ls -R dist

      - name: Publish (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true