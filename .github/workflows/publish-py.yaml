name: publish

on:
  push:
    tags: [ 'rc' ]
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - uses: astral-sh/setup-uv@v6
      - name: Build sdist
        run: |
          cd py-radiate
          uvx maturin sdist -o target-sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: py-radiate/target-sdist/*.tar.gz

  wheels:
    continue-on-error: true 
    name: ${{ matrix.os }} • ${{ matrix.arch }} • ${{ matrix.mode }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - { os: ubuntu-latest, arch: x86_64,  mode: gil,   py: '3.12' }
          - { os: ubuntu-latest, arch: aarch64, mode: gil,   py: '3.12', target: aarch64-unknown-linux-gnu }
          - { os: ubuntu-latest, arch: x86_64,  mode: nogil, py: '3.13t' }
          - { os: ubuntu-latest, arch: aarch64, mode: nogil, py: '3.13t', target: aarch64-unknown-linux-gnu }

          # macOS
          - { os: macos-13, arch: x86_64, mode: gil,   py: '3.12' }
          - { os: macos-15, arch: arm64,  mode: gil,   py: '3.12' }
          - { os: macos-13, arch: x86_64, mode: nogil, py: '3.13t' }
          - { os: macos-15, arch: arm64,  mode: nogil, py: '3.13t' }

          # Windows
          - { os: windows-latest, arch: x64, mode: gil,   py: '3.12' }
          - { os: windows-latest, arch: x64, mode: nogil, py: '3.13t' }

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - uses: astral-sh/setup-uv@v6

      - name: Ensure requested interpreter (best effort)
        shell: bash
        run: |
          set -e
          uv python install "${{ matrix.py }}" || true
          uv python list --only-installed

      - name: Select interpreter and flags
        id: envsel
        shell: bash
        run: |
          set -e
          
          if [[ "${{ matrix.mode }}" == "nogil" ]]; then
            PY="$(uv python find "${{ matrix.py }}" 2>/dev/null || true)"
            FLAGS="--no-default-features --features nogil"
          else
            # Use the runner's Python from setup-python for GIL builds
            PY="$(which python)"
            FLAGS="--features gil"
          fi

          if [[ -z "$PY" ]]; then
            echo "skip=1" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "skip=0"       >> $GITHUB_OUTPUT
          echo "py=$PY"       >> $GITHUB_OUTPUT
          echo "flags=$FLAGS" >> $GITHUB_OUTPUT

      - name: Build wheel (Linux)
        if: runner.os == 'Linux' && steps.envsel.outputs.skip == '0'
        uses: PyO3/maturin-action@v1
        env:
          PYO3_PYTHON: ${{ steps.envsel.outputs.py }}
        with:
          maturin-version: '1.9.4'
          command: build
          args: >
            --release
            -m py-radiate/Cargo.toml
            -o dist
            ${{ steps.envsel.outputs.flags }}
            ${{ matrix.target && format('--target {0}', matrix.target) || '' }}
          manylinux: auto

      - name: Build wheel (macOS/Windows)
        if: runner.os != 'Linux' && steps.envsel.outputs.skip == '0'
        uses: PyO3/maturin-action@v1
        env:
          PYO3_PYTHON: ${{ steps.envsel.outputs.py }}
        with:
          maturin-version: '1.9.4'
          command: build
          args: >
            --release
            -m py-radiate/Cargo.toml
            -o dist
            ${{ steps.envsel.outputs.flags }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.mode }}
          path: dist/*.whl

  publish:
    needs: [ sdist, wheels ]
    runs-on: ubuntu-latest
    if: ${{ needs.sdist.result == 'success' && startsWith(github.ref, 'refs/tags/v') }}
    environment:
      name: publish_pypi
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - run: ls -R dist
      - name: Publish (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true
