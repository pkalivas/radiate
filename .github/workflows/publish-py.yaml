name: publish

on:
  push:
    tags: [ 'rc' ]
  workflow_dispatch:
    inputs:
      os:
        description: "Limit to one OS (ubuntu-latest|macos-13|macos-15|windows-latest)"
        required: false
        default: ""
      arch:
        description: "Limit to one arch (x86_64|aarch64|arm64|x64)"
        required: false
        default: ""
      py:
        description: "Limit to one Python (e.g. 3.12 or 3.13t)"
        required: false
        default: ""
      mode:
        description: "Limit to one mode (gil|nogil)"
        required: false
        default: ""

permissions:
  contents: read
  id-token: write

env:
  ACT: 'false'

jobs:
  linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # glibc modern
          - { target: x86_64,  manylinux: manylinux_2_28 }
          - { target: aarch64, manylinux: manylinux_2_28 }
          # older/alt arches need manylinux2014
          - { target: i686,    manylinux: manylinux2014 }
          - { target: armv7,   manylinux: manylinux2014 }
          - { target: s390x,   manylinux: manylinux2014 }
          - { target: ppc64le, manylinux: manylinux2014 }
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # ---------- ABI3 (GIL) wheels ----------
      - name: Build wheels (abi3 • ${{ matrix.target }} • ${{ matrix.manylinux }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: >
            build
            --release
            -m py-radiate/Cargo.toml
            --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      # ---------- Free-threaded cp313t wheels ----------
      - name: Build wheels (cp313t • ${{ matrix.target }} • ${{ matrix.manylinux }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: >
            build
            --release
            --out dist
            -m py-radiate/Cargo.toml
            -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist/*

  musllinux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64, aarch64, armv7 ]
    steps:
      - uses: actions/checkout@v4

      - name: Build wheels (abi3 • musllinux_1_2 • ${{ matrix.target }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: >
            build
            --release
            -m py-radiate/Cargo.toml
            --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Build wheels (cp313t • musllinux_1_2 • ${{ matrix.target }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: >
            build
            --release
            --out dist
            -m py-radiate/Cargo.toml
            -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}
          path: dist/*

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64, py_arch: x64 }
          - { target: i686,   py_arch: x86 }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: ${{ matrix.py_arch }}
      - name: Build wheels (ABI3 • Windows • ${{ matrix.target }})
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          target: ${{ matrix.target }}
          args: >
            build
            --release
            -m py-radiate/Cargo.toml
            --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist/*

  macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - name: Build wheels (ABI3 • macOS universal2)
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          args: >
            build
            --release
            --out dist
            -m py-radiate/Cargo.toml
            --universal2
            --interpreter python3
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-universal2
          path: dist/*

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: '1.9.4'
          command: sdist
          args: --out dist
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist/*

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ linux, musllinux, windows, macos, sdist ]
    environment:
      name: publish_pypi
    # if: ${{ (startsWith(github.ref, 'refs/tags/')) }
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist-collect
          merge-multiple: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist-collect/**/*'

      - name: Gather dists
        run: |
          mkdir -p dist
          find dist-collect -type f -name "*.whl" -exec cp {} dist/ \;
          find dist-collect -type f -name "*.tar.gz" -exec cp {} dist/ \;
          ls -l dist

      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true

# name: publish

# on:
#   push:
#     tags: [ 'rc' ]
#   workflow_dispatch:
#     inputs:
#       os:
#         description: "Limit to one OS (ubuntu-latest|macos-13|macos-15|windows-latest)"
#         required: false
#         default: ""
#       arch:
#         description: "Limit to one arch (x86_64|aarch64|arm64|x64)"
#         required: false
#         default: ""
#       py:
#         description: "Limit to one Python (e.g. 3.12 or 3.13t)"
#         required: false
#         default: ""
#       mode:
#         description: "Limit to one mode (gil|nogil)"
#         required: false
#         default: ""

# permissions:
#   contents: read
#   id-token: write

# env:
#   CARGO_INCREMENTAL: 0
#   CARGO_NET_RETRY: 10
#   RUSTUP_MAX_RETRIES: 10

# jobs:
#   sdist:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-python@v5
#         with: { python-version: '3.12' }
#       - uses: astral-sh/setup-uv@v6
#       - name: Build sdist
#         run: |
#           cd py-radiate
#           uvx maturin sdist -o target-sdist
#       - uses: actions/upload-artifact@v4
#         with:
#           name: sdist
#           path: py-radiate/target-sdist/*.tar.gz

#   wheels:
#     continue-on-error: true 
#     name: ${{ matrix.os }} • ${{ matrix.arch }} • ${{ matrix.mode }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           # Linux
#           - { os: ubuntu-latest, arch: x86_64,  mode: gil,   py: '3.12' }
#           - { os: ubuntu-latest, arch: aarch64, mode: gil,   py: '3.12', target: aarch64-unknown-linux-gnu }
#           - { os: ubuntu-latest, arch: x86_64,  mode: nogil, py: '3.13t' }
#           - { os: ubuntu-latest, arch: aarch64, mode: nogil, py: '3.13t', target: aarch64-unknown-linux-gnu }

#           # macOS
#           - { os: macos-13, arch: x86_64, mode: gil,   py: '3.12' }
#           - { os: macos-15, arch: arm64,  mode: gil,   py: '3.12' }
#           - { os: macos-13, arch: x86_64, mode: nogil, py: '3.13t' }
#           - { os: macos-15, arch: arm64,  mode: nogil, py: '3.13t' }

#           # Windows
#           - { os: windows-latest, arch: x64, mode: gil,   py: '3.12' }
#           - { os: windows-latest, arch: x64, mode: nogil, py: '3.13t' }
    
#     env:
#       MATCH: ${{ github.event_name != 'workflow_dispatch' || (
#           (inputs.os   == '' || matrix.os   == inputs.os)   &&
#           (inputs.arch == '' || matrix.arch == inputs.arch) &&
#           (inputs.py   == '' || matrix.py   == inputs.py)   &&
#           (inputs.mode == '' || matrix.mode == inputs.mode)
#         ) }}

#     steps:
#       - uses: actions/checkout@v4
#         if: ${{ env.MATCH }}

#       - uses: dtolnay/rust-toolchain@stable
#         if: ${{ env.MATCH }}

#       - uses: actions/setup-python@v5
#         if: ${{ env.MATCH }}
#         with: { python-version: '3.12' }

#       - uses: astral-sh/setup-uv@v6
#         if: ${{ env.MATCH }}

#       - name: Ensure requested interpreter (best effort)
#         if: ${{ env.MATCH }}
#         shell: bash
#         run: |
#           set -e
#           uv python install "${{ matrix.py }}" || true
#           uv python list --only-installed

#       - name: Select interpreter and flags
#         id: envsel
#         if: ${{ env.MATCH }}
#         shell: bash
#         run: |
#           set -e
          
#           if [[ "${{ matrix.mode }}" == "nogil" ]]; then
#             PY="$(uv python find "${{ matrix.py }}" 2>/dev/null || true)"
#             FLAGS="--no-default-features --features nogil"
#           else
#             # Use the runner's Python from setup-python for GIL builds
#             PY="$(which python)"
#             FLAGS="--features gil"
#           fi

#           if [[ -z "$PY" ]]; then
#             echo "skip=1" >> $GITHUB_OUTPUT
#             exit 0
#           fi

#           echo "skip=0"       >> $GITHUB_OUTPUT
#           echo "py=$PY"       >> $GITHUB_OUTPUT
#           echo "flags=$FLAGS" >> $GITHUB_OUTPUT

#       - name: Build wheel (Linux)
#         if: env.MATCH && runner.os == 'Linux' && steps.envsel.outputs.skip == '0'
#         uses: PyO3/maturin-action@v1
#         env:
#           PYO3_PYTHON: ${{ steps.envsel.outputs.py }}
#         with:
#           maturin-version: '1.9.4'
#           command: build
#           args: >
#             --release
#             -m py-radiate/Cargo.toml
#             -o dist
#             ${{ steps.envsel.outputs.flags }}
#             ${{ matrix.target && format('--target {0}', matrix.target) || '' }}
#           manylinux: auto

#       - name: Build wheel (macOS/Windows)
#         if: env.MATCH && runner.os != 'Linux' && steps.envsel.outputs.skip == '0'
#         uses: PyO3/maturin-action@v1
#         env:
#           PYO3_PYTHON: ${{ steps.envsel.outputs.py }}
#         with:
#           maturin-version: '1.9.4'
#           command: build
#           args: >
#             --release
#             -m py-radiate/Cargo.toml
#             -o dist
#             ${{ steps.envsel.outputs.flags }}

#       - uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.mode }}
#           path: dist/*.whl

#   publish:
#     needs: [ sdist, wheels ]
#     runs-on: ubuntu-latest
#     if: ${{ needs.sdist.result == 'success' && startsWith(github.ref, 'refs/tags/v') }}
#     environment:
#       name: publish_pypi
#     steps:
#       - uses: actions/download-artifact@v4
#         with:
#           path: dist
#           merge-multiple: true
#       - run: ls -R dist
#       - name: Publish (Trusted Publisher)
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           verbose: true
#           skip-existing: true
